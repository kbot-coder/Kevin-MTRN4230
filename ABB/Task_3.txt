MODULE ReadRobStatus

    VAR socketdev client_socket;
    VAR socketdev temp_socket;
    CONST string host:="127.0.0.1";
    CONST num port:=1026;
    
    VAR robtarget position;
    VAR jointtarget joint;
    
    VAR string strP;
    VAR string strJ;
    VAR string strIO;
    
    ! Variables to store the I/O value
    VAR dionum DO_1;
    VAR num DO_2;
    VAR num DO_3;
    VAR num DO_4;
    VAR num DI_1;
    
    VAR bool init:=TRUE;
    
    PROC MainRead()
        
        ReadEndeffPos;
        ReadJointPos;        
        ReadIOStat;
        ConvToString;
        SendStatus;
               
    ENDPROC
   
    ! Sending the status of the robot to the client
    PROC SendStatus()

        SocketCreate temp_socket;
        SocketBind temp_socket, host, port;
        SocketListen temp_socket;
        SocketAccept temp_socket, client_socket;

        SocketSend client_socket \Str:=(strP+strJ+strIO+"\0A");
        SocketClose temp_socket;
        SocketClose client_socket;
        
    ENDPROC
    
    ! Convert the joints and position value to string
    PROC ConvToString()
        strP := ValToStr(position.trans);   ! positon
        strJ := ValToStr(joint.robax); ! joint
        ! input/output
        strIO := "["+ValToStr(DI_1)+","+ValToStr(DO_1)+","+ValToStr(DO_2)+","+ValToStr(DO_3)+","+ValToStr(DO_4)+"]";
    ENDPROC
    
    ! read the I/O status
    PROC ReadIOStat()
        
        ! read and store the value to 'num' variable so it can
        ! be converted into strings
        IF DI10_1 = 1 THEN
            DI_1 := 1;
        ELSE
            DI_1 := 0;
        ENDIF
        
        IF DOutput(DO10_1) = 1 THEN
            DO_1 := 1;
        ELSE
            DO_1 := 0;
        ENDIF
        
        IF DOutput(DO10_2) = 1 THEN
            DO_2 := 1;
        ELSE
            DO_2 := 0;
        ENDIF
        
        IF DOutput(DO10_3) = 1 THEN
            DO_3 := 1;
        ELSE
            DO_3 := 0;
        ENDIF
        
        IF DOutput(DO10_4) = 1 THEN
            DO_4 := 1;
        ELSE
            DO_4 := 0;
        ENDIF
       
    ENDPROC
    
    ! read the endeffector position
    PROC ReadEndeffPos()
        position:=CRobT(\TaskName:="T_ROB1");
        position.trans.x := Trunc(position.trans.x \Dec:=0);
        position.trans.y := Trunc(position.trans.y \Dec:=0);
        position.trans.z := Trunc(position.trans.z \Dec:=0);
    ENDPROC
    
    ! read the joint angle
    PROC ReadJointPos()
        joint:=CJointT(\TaskName:="T_ROB1");
        joint.robax.rax_1:=Trunc(joint.robax.rax_1 \Dec:=0);
        joint.robax.rax_2:=Trunc(joint.robax.rax_2 \Dec:=0);
        joint.robax.rax_3:=Trunc(joint.robax.rax_3 \Dec:=0);
        joint.robax.rax_4:=Trunc(joint.robax.rax_4 \Dec:=0);
        joint.robax.rax_5:=Trunc(joint.robax.rax_5 \Dec:=0);
        joint.robax.rax_6:=Trunc(joint.robax.rax_6 \Dec:=0);
    ENDPROC

ENDMODULE